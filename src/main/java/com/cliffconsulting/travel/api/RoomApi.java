/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.0-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cliffconsulting.travel.api;

import com.cliffconsulting.travel.model.ModelApiResponse;
import com.cliffconsulting.travel.model.Room;
import com.cliffconsulting.travel.model.RoomQuery;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-15T21:16:59.955Z")

@Api(value = "room", description = "the room API")
public interface RoomApi {

    @ApiOperation(value = "Add a new room to the system", nickname = "addRoom", notes = "", response = Room.class, tags={ "room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Room.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/room",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Room> addRoom(@ApiParam(value = "Room object that needs to be added" ,required=true )  @Valid @RequestBody Room body);


    @ApiOperation(value = "Deletes a Room", nickname = "deleteRoom", notes = "", tags={ "room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Hotel not found") })
    @RequestMapping(value = "/room/{roomId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRoom(@ApiParam(value = "Room id to delete",required=true) @PathVariable("roomId") Long roomId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey);


    @ApiOperation(value = "finds a room", nickname = "findRoom", notes = "returns list of available rooms that meet the input search critera RoomQuery", response = Room.class, responseContainer = "List", tags={ "room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Room.class, responseContainer = "List"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/room/findRoom",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<List<Room>> findRoom(@ApiParam(value = "Room object that needs to be added" ,required=true )  @Valid @RequestBody RoomQuery body);


    @ApiOperation(value = "Find room by ID", nickname = "getRoomById", notes = "Returns a single room", response = Room.class, tags={ "room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Room.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Room not found") })
    @RequestMapping(value = "/room/{roomId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Room> getRoomById(@ApiParam(value = "ID of room to return",required=true) @PathVariable("roomId") Long roomId);


    @ApiOperation(value = "Update an existing room", nickname = "updateRoom", notes = "", tags={ "room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Room not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/room",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateRoom(@ApiParam(value = "Room object that needs to be updated" ,required=true )  @Valid @RequestBody Room body);


    @ApiOperation(value = "uploads an image", nickname = "uploadFile", notes = "", response = ModelApiResponse.class, tags={ "room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ModelApiResponse.class),
        @ApiResponse(code = 404, message = "Room not found") })
    @RequestMapping(value = "/room/{roomId}/uploadImage",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> uploadFile(@ApiParam(value = "ID of room to update",required=true) @PathVariable("roomId") Long roomId,@ApiParam(value = "Additional data to pass to server") @RequestParam(value="additionalMetadata", required=false)  String additionalMetadata,@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile file);

}
